# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Sun Jun 17 14:19:01 2012

import wx
import os
from Recorder import *
from CameraPanel import *
from Codec import *
from QRDecoder import *
#from InfoTable import *
from InfoList import *
import inspect
#from Asset import *

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class RecorderPanel(wx.Panel):
	
	__preview = True	# Show camera in the window
	__acquiring = False	# Acquire data from camera
	__recording = False	# Save to file
	
	
	
	# In the notebook
	__index = None
	
	# Connected to a tracker
	#__tracker = None
	# To communicate with the tracker
	#__channel = None
	__recorder = None

	# For the preview
	#__previewChannel = None
	
	# For preview
	__lastFrame = None
	
	__alive = True
	
	# The path were to save
	__path = None

	# The list of camera panels that wanted to be allerted with the preview frames
	__cameraPanels = None
	
	#def __init__(self, *args, **kwds):
	def __init__(self, cameraIndex, parent):
		# begin wxGlade: MyFrame1.__init__
		#kwds["style"] = wx.DEFAULT_FRAME_STYLE
		#wx.Panel.__init__(self, *args, **kwds)
		wx.Panel.__init__(self, parent, wx.ID_ANY)
		self.label_1 = wx.StaticText(self, -1, "Camera device")
		self.camera_choice = wx.ComboBox(self, -1, choices=["\\dev0", "\\dev1", "\\dev2", "\\dev3"], style=wx.CB_DROPDOWN)
		
		self.__index = cameraIndex
		
		# Names of all the available codecs
		codecNames = []
		for (_codec, name) in codecArray:
			codecNames.append(name)
			
		self.label_3 = wx.StaticText(self, -1, "Codec")
		self.codec_choice = wx.ComboBox(self, -1, choices=codecNames, style=wx.CB_DROPDOWN)
		
		
		self.label_2 = wx.StaticText(self, -1, "Base output folder")
		self.video_output = wx.TextCtrl(self, -1, os.path.join(os.getcwd(), "videos")	)
		#print str(os.path.join(os.getcwd(), "videos"))
		self.button_Output = wx.Button(self, -1, "Select")
		self.video_output.Disable()
		
		#self.panel_2 = wx.Panel(self, -1)
		self.cameraPanel = CameraPanel(self)

		self.__cameraPanels = []
		self.AddCameraPanelForPreview(self.cameraPanel)
		#self.togglePreview = wx.ToggleButton(self, label="Recording preview")
		#self.togglePreview.SetValue(True)
		
		
		#self.infoBox = wx.TextCtrl(self, -1, style=wx.TE_MULTILINE|wx.TE_READONLY)
		'''
		rowLabels = ("Name","Date","Flies","Gender","Genotype","Comments")
		colLabels = ('Value')
		data = (
			[	'Video ' + str(datetime.date.today())	],
			[	str(datetime.date.today())				],
			
			[None],
			[None],
			[None],
			[None]
			)
		self.infoTable = InfoTable(self, data, rowLabels, colLabels)
		'''
		rowLabels = ("name","flies","gender","genotype","comments")
		colLabels = ('Property', 'Value')
		data = [
			#'Video ' + str(datetime.date.today()),
			#str(datetime.date.today()),
			None,
			None,
			None,
			None,
			None
			]
		self.infoList = InfoList(self, data, rowLabels, colLabels, self.OnEditList)
		
		#self.infoBox.Disable();
		
		# Start / Stop data from the camera and display them in the window
		#self.toggleVideoPreview = wx.ToggleButton(self, label="Show preview")
		#self.toggleVideoPreview.SetValue(True)
		
		self.toggleAcquire = wx.ToggleButton(self, label="Acquire video")
		self.toggleAcquire.SetValue(False)
		
		# Start / Stop recording
		self.toggleRecording = wx.ToggleButton(self, label="Record to file")
		self.toggleRecording.SetValue(False)
		self.toggleRecording.Disable()
		
		self.button_loadInfo = wx.Button(self, label="Load info")
		self.button_loadInfo.Disable()
		
		#self.button_Preview = wx.Button(self, -1, "Get frame")
		#self.button_Record = wx.Button(self, -1, "Record")
		#self.button_Stop = wx.Button(self, -1, "Stop")
		#self.button_Stop.Disable()
		
		#self.__set_properties()
		self.camera_choice.SetSelection(cameraIndex)
		#self.cameraPanel.ChangeWatermark(str(cameraIndex))
		self.__do_layout()
		# end wxGlade
		
		#EVT_FRAME(self,self.OnFrame)
		#self.Bind(wx.EVT_BUTTON, self.OnRecord, self.button_Record)
		#self.Bind(wx.EVT_BUTTON, self.OnStop, self.button_Stop)
		#self.Bind(wx.EVT_BUTTON, self.OnFramePolling, self.button_Preview)
		#self.Bind(wx.EVT_TOGGLEBUTTON, self.OnTogglePreview, self.togglePreview)
		#self.Bind(wx.EVT_TOGGLEBUTTON, self.OnToggleVideoPreview, self.toggleVideoPreview)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnToggleAcquire, self.toggleAcquire)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnToggleRecording, self.toggleRecording)
		self.codec_choice.SetSelection(DIVX_INDEX)
		
		
		self.Bind(wx.EVT_COMBOBOX, self.OnCameraChange, self.camera_choice)
		self.Bind(wx.EVT_COMBOBOX, self.OnCodecChange, self.codec_choice)
		
		self.Bind(wx.EVT_BUTTON, self.OnOutputSelection, self.button_Output)
		
		self.Bind(wx.EVT_BUTTON, self.OnLoadInfo, self.button_loadInfo)


	#def __set_properties(self):
		# begin wxGlade: MyFrame1.__set_properties
		#self.SetTitle("frame_2")
	#	self.camera_choice.SetSelection(0)
		# end wxGlade
		


	def __do_layout(self):
		# begin wxGlade: MyFrame1.__do_layout
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3 = wx.BoxSizer(wx.VERTICAL)
		#sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
		
		sizer_4.Add((5, 5), 0, 0, 0)
		sizer_4.Add(self.label_1, 2, wx.EXPAND, 0)
		sizer_4.Add(self.camera_choice, 4, wx.EXPAND, 0)
		sizer_4.Add((5, 5), 0, 0, 0)
		sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
		sizer_3.Add((5, 5), 0, 0, 0)
		
		
		
		sizer_8.Add((5, 5), 0, 0, 0)
		sizer_8.Add(self.label_3, 2, wx.EXPAND, 0)
		sizer_8.Add(self.codec_choice, 4, wx.EXPAND, 0)
		sizer_8.Add((5, 10), 0, 0, 0)
		sizer_3.Add(sizer_8, 0, wx.EXPAND, 0)
		sizer_3.Add((5, 5), 0, 0, 0)
		
		#sizer_5.Add(self.label_2, 2, wx.EXPAND, 0)
		
		sizer_7.Add((5, 5), 0, 0, 0)
		sizer_7.Add(self.label_2, 2, wx.EXPAND, 0)
		sizer_7.Add(self.video_output, 3, wx.EXPAND, 0)
		sizer_7.Add((5, 5), 0, 0, 0)
		sizer_7.Add(self.button_Output, 1, 0, 0)
		sizer_7.Add((5, 10), 0, 0, 0)
		sizer_3.Add(sizer_7, 0, wx.EXPAND, 0)
		
		#sizer_5.Add(self.video_output, 4, 0, 0)
		#sizer_5.Add(sizer_7, 4, wx.EXPAND, 0)
		
		
		sizer_9.Add(self.cameraPanel, 0, wx.EXPAND, 0)
		sizer_9.Add((10, 10), 0, 0, 0)
		#sizer_9.Add(self.infoBox, 10, wx.EXPAND, 0)
		#sizer_9.Add(self.infoTable, 10, wx.EXPAND, 0)
		sizer_9.Add(self.infoList, 10, wx.EXPAND, 0)
		sizer_9.Add((5, 10), 0, 0, 0)
		
		sizer_2.Add((5, 5), 0, 0, 0)
		#sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
		sizer_2.Add(sizer_3, 2, wx.EXPAND, 0)
		
		
		
		
		#sizer_2.Add(self.cameraPanel, 10, wx.EXPAND, 0)
		sizer_2.Add((20, 10), 0, wx.EXPAND, 0)
		sizer_2.Add(sizer_9, 0, wx.EXPAND, 0)
		sizer_2.Add((20, 10), 0, wx.EXPAND, 0)
		
		sizer_6.Add((20, 10), 10, wx.EXPAND, 0)
		#sizer_6.Add(self.toggleVideoPreview, 0, 0, 0)
		#sizer_6.Add((20, 10), 0, 0, 0)
		sizer_6.Add(self.toggleAcquire, 0, 0, 0)
		sizer_6.Add((10, 10), 0, 0, 0)
		sizer_6.Add(self.toggleRecording, 0, 0, 0)
		sizer_6.Add((10, 10), 0, 0, 0)
		sizer_6.Add(self.button_loadInfo, 0, 0, 0)
		sizer_6.Add((5, 10), 0, 0, 0)

		
		#sizer_6.Add(self.togglePreview, 0, 0, 0)
		#sizer_6.Add((20, 20), 0, 0, 0)
		#sizer_6.Add(self.button_Preview, 0, 0, 0)
		#sizer_6.Add((20, 20), 0, 0, 0)
		#sizer_6.Add(self.button_Record, 0, 0, 0)
		#sizer_6.Add(self.button_Stop, 0, 0, 0)
		sizer_2.Add(sizer_6, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_2)
		sizer_2.Fit(self)
		self.Layout()
		# end wxGlade
	
	def OnEditList(self, propertyName, propertyValue):
		dictionary = {}
		if propertyValue == "":
			propertyValue = None
		dictionary[propertyName] = propertyValue
		self.__recorder.RemoteCallProcedure("UpdateRecordingData", dictionary)
		#self.__channel.send(	("UpdateRecordingData", dictionary)	)
		#self.__channel.recv()

	#def OnTogglePreview (self, event):
	#	self.cameraPanel.SetShowPreview(	not self.cameraPanel.GetShowPreview()	)


	#def OnToggleVideoPreview (self, event):
	#	pass
	'''
	if self.__tracker is None:
		return
	
	# Start to capture images
	self.__preview = not self.__preview
	
	self.cameraPanel.SetShowPreview(self.__preview)
	#self.__tracker.SetPreview(self.__preview)
	'''
	'''
	if self.__preview:
		self.camera_choice.Disable()
		self.video_output.Disable()
		self.toggleRecording.Enable()
	else:
		self.camera_choice.Enable()
		self.video_output.Enable()
		self.toggleRecording.Disable()
	'''
		
	def OnToggleAcquire (self, event):
		#if self.__tracker is None:
		#if self.__channel is None:
		if self.__recorder is None:
			return
			
		self.__acquiring = not self.__acquiring
		
		if self.__acquiring:
			self.camera_choice.Disable()
			#self.codec_choice.Disable()
			#self.video_output.Disable()
			#self.button_Output.Disable()
			self.toggleRecording.Enable()
			self.button_loadInfo.Enable()
		else:
			self.camera_choice.Enable()
			#self.codec_choice.Enable()
			#self.video_output.Enable()
			#self.button_Output.Enable()
			self.toggleRecording.Disable()
			self.button_loadInfo.Disable()
		
		self.__recorder.RemoteCallProcedure("SetAcquire", self.__acquiring)
		#self.__channel.send(	("SetAcquire", self.__acquiring)	)
		#self.__channel.recv()

		#self.__tracker.SetAcquire(self.__acquiring)
		#print "Request: ", self.__acquiring
	
	def OnToggleRecording (self, event):
		#if self.__tracker is None:
		#if self.__channel is None:
		if self.__recorder is None:
			return
		#self.__tracker.StartCapture()
		
		# Start to record images
		self.__recording = not self.__recording
		
		#self.__tracker.SetRecording(self.__recording)

		result = self.__recorder.RemoteCallProcedure("SetRecording", self.__recording)
		#self.__channel.send(	("SetRecording", self.__recording)	)
		#result = self.__channel.recv();
		#print "`t RESULT of SetRecording (", self.__recording, "):\t", result 
		
		if result is not None:
			self.infoList.SetNewData(result)
		
		if self.__recording:
			#self.camera_choice.Disable()
			#self.video_output.Disable()
			#self.toggleRecording.Enable()
			self.codec_choice.Disable()
			self.button_Output.Disable()
			self.toggleAcquire.Disable()
			#image_recording = wx.Bitmap('./../images/rec.png', wx.BITMAP_TYPE_PNG)
			#self.GetParent().SetPageImage(self.__index, image_recording)
		else:
			#self.camera_choice.Enable()
			#self.video_output.Enable()
			#self.toggleRecording.Disable()
			self.codec_choice.Enable()
			self.button_Output.Enable()
			self.toggleAcquire.Enable()
			self.infoList.ClearAllData()
	
	def OnCameraChange (self, event):
		#self.__tracker.ChangeCamera(	self.camera_choice.GetCurrentSelection()	)
		self.__recorder.RemoteCallProcedure("SetCamera", self.camera_choice.GetCurrentSelection()	)
		#self.__channel.send(	("SetCamera",	self.camera_choice.GetCurrentSelection()	)	)
		#self.__channel.recv()
		
		
		#self.cameraPanel.ChangeWatermark(str(self.camera_choice.GetCurrentSelection()))
	
	def OnCodecChange (self, event):
		codecIndex = self.codec_choice.GetCurrentSelection()
		#self.__tracker.SetCodec(	codecArray[codecIndex][0]	)
		self.__recorder.RemoteCallProcedure("SetCodec",	codecArray[codecIndex][0]	)
		#self.__channel.send(	("SetCodec",	codecArray[codecIndex][0]	)	)
		#self.__channel.recv()
		#print "CODEC" , codecArray[codecIndex][1]
	
	
	
	#(self, parent, message, defaultPath, style, pos, size, name) 
	def OnOutputSelection(self, event):
		""" Open a file"""
		#dirName = os.path.dirname(	self.video_output.GetLabel()	)
		dirName = self.video_output.GetLabel()
		#fileName = os.path.basename(	self.video_output.GetLabel()	)
		#style=wx.DD_DEFAULT_STYLE
		#dlg = wx.DirDialog(self, "Save the output video", dirName, fileName, "AVI files (*.avi)|*.avi", wx.SAVE | wx.OVERWRITE_PROMPT)
		dlg = wx.DirDialog(self, "Save the output video", dirName, wx.DD_NEW_DIR_BUTTON)
		if dlg.ShowModal() == wx.ID_OK:
			#self.filename = dlg.GetFilename()
			#self.dirname = dlg.GetDirectory()
			#path = os.path.join(self.dirname, self.filename)
			#print path
			self.__path = dlg.GetPath()
			self.video_output.SetLabel(self.__path)
			
			#self.__tracker.SetOutputFile(path)
			self.OnOutputChange(None)
			
			
			
			
			#f = open(os.path.join(self.dirname, self.filename), 'r')
			#self.control.SetValue(f.read())
			#f.close()
			
		dlg.Destroy()
		
	def OnOutputChange(self, event):
		self.__recorder.RemoteCallProcedure("SetOutputBaseFolder",	self.video_output.GetLabel()	)
		#self.__channel.send(	("SetOutputBaseFolder",	self.video_output.GetLabel()	)	)
		#self.__channel.recv()
	
	'''
	def SetRecorder (self, tracker):
		self.__tracker = tracker
		self.__tracker.SetCameraPanel(self.cameraPanel)
		self.__tracker.SetOutputFile(self.video_output.GetLabel())
	'''
		
		
	
	def OnLoadInfo(self, event):
		#print "CLICK"
		codes = self.__recorder.RemoteCallProcedure("LoadQRCodeIntoRecordingData", None)
		#self.__channel.send(	("LoadQRCodeIntoRecordingData", None)	)
		#codes = self.__channel.recv()
		
		if codes is None:
			return
		
		self.infoList.SetNewData(codes)
	
	#def SetChannel (self, channel):
	#	self.__channel = channel
		
	#def SetRecorder (self, channel, preview):
	#def SetRecorder (self, recorder, preview):
	def SetRecorder (self, recorder):
		#self.__tracker = tracker
		#self.__channel = channel
		self.__recorder = recorder
		#self.__previewChannel = preview
		
		self.OnCameraChange(None)
		self.OnCodecChange(None)
		self.OnOutputChange(None)
		
		threadPreview = threading.Thread(target=self.__previewFrames, name="PreviewDaemon")
		threadPreview.setDaemon(True)
		threadPreview.daemon = True
		threadPreview.start()
		# TODO FIXME: if you invoke SetRecorder again, what happen to the previous thread?
	'''	
	def SetTabSelected (self, tabSelected) :
		pass
		#self.cameraPanel.SetTabSelected(tabSelected)
	'''
	
	
	#def OnFramePolling (self, event):
	#	self.__tracker.FramePolling()
		
	def IsRecording(self) :
		#return self.__running
		return self.__recording
	
	
	def AddCameraPanelForPreview(self, cameraPanel):
		self.__cameraPanels.append(cameraPanel)

	
	def __previewFrames(self):
		previewChannel = self.__recorder.GetPreviewChannel()
		while self.__alive:
			# Signal that it is ready to receive another frame
			previewChannel.send(True)
			
			# What for the frame
			while not previewChannel.poll(1):
				if not self.__alive:
					break;
			# Goto! Where are you when I need you!
			if not self.__alive:
				break;
				
			frame = previewChannel.recv()
			
			self.__lastFrame = frame;
			
			#print "---------"
			for cameraPanel in self.__cameraPanels:
				cameraPanel.OnFrame(frame);
				#print cameraPanel
			#self.cameraPanel.OnFrame(frame);
		print "[ PREVIEW THREAD ]\tStop."
		
		try:
			previewChannel.close()
		except IOError, e:
			print "Captured IOError in __previewFrames during closure: ", e
		
		
	def DestroyGently (self):
		#print "HELLO!"
		#print "-----------------------"
		self.camera_choice.Disable()
		self.codec_choice.Disable()
		#self.video_output.Disable()
		self.button_Output.Disable()
		self.toggleRecording.Disable()
		
		#self.__tracker.DestroyGently()
		#self.__tracker.join(timeout)
		self.__recorder.DestroyGently()
		#self.__channel.send(	("DestroyGently", None)	)
		#self.__channel.recv();
		#self.__channel.close();
		
		#self.Destroy()
		#print "=============================================="
		self.__alive = False

# end of class MyFrame1
